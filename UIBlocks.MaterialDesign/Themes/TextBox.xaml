<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UIBlocks.MaterialDesign.Themes"
                    xmlns:lib="clr-namespace:UIBlocks.MaterialDesign"
                    xmlns:converters="clr-namespace:UIBlocks.MaterialDesign.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/UIBlocks.MaterialDesign;component/Colors/LightThemeColor.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="MDTextBox" TargetType="TextBox">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MDTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="lib:TextFieldEditor.TextBoxViewMargin" Value="0 0 0 0" />
        <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"
                                Padding="0 4 0 4">
                            <Grid Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                                <lib:SmartHint x:Name="Hint"
                                               Hint="{Binding Path=(lib:HintEditor.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                                               HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                               FontSize="{TemplateBinding FontSize}"
                                               HintOpacity="{Binding Path=(lib:HintEditor.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                               UseFloating="{Binding Path=(lib:HintEditor.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                               FloatingScale="{Binding Path=(lib:HintEditor.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                               FloatingOffset="{Binding Path=(lib:HintEditor.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"                                               
                                               />
                            </Grid>
                        </Border>
                        <lib:UnderLine x:Name="underline" Visibility="{Binding Path=(lib:TextFieldEditor.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource Purple500Brush}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="underline" Property="IsActive" Value="True" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource Purple500Brush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>