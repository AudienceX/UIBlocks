<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UIBlocks.MaterialDesignTheme.Themes"
                    xmlns:wpf="clr-namespace:UIBlocks.MaterialDesignTheme"
                    xmlns:converters="clr-namespace:UIBlocks.MaterialDesignTheme.converter">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/UIBlocks.MaterialDesignTheme;component/Themes/Button.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/UIBlocks.MaterialDesignTheme;component/Themes/Shadows.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/UIBlocks.MaterialDesignTheme;component/Themes/ToolTip.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="NullVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="InvertedNullVisibilityConverter" NullValue="Visible" NotNullValue="Collapsed" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter"/>



    <Style x:Key="MDSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MDSelection}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MDSelection}"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Height="1" Fill="{TemplateBinding Background}"
                               HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <wpf:PackIcon Kind="DotsVertical" x:Key="MDPopupBoxToggleContent" x:Shared="False" Margin="4 0 4 0" Width="24" Height="24"
                  Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=Foreground}" />

    <Style TargetType="{x:Type wpf:PopupBox}" x:Key="MDPopupBox">
        <Setter Property="ToggleContent" Value="{StaticResource MDPopupBoxToggleContent}" />
        <Setter Property="wpf:RippleEditor.FeedBackBrush" Value="Black"/>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="wpf:ShadowEditor.shadowdepth" Value="Depth3" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0 8 0 8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Separator" BasedOn="{StaticResource MDSeparator}"/>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"                                                          
                                                    ClipToBounds="False"
                                                    wpf:RippleEditor.OnCenter="True"
                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Padding="{TemplateBinding Padding}" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                      Cursor="Hand"
                                      VerticalAlignment="Center"
                                      />
                        <wpf:PopupEx x:Name="PART_Popup" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"                                            
                                            HorizontalOffset="5"
                                            VerticalOffset="5"
                                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                                            Placement="Custom"
                                            PopupAnimation="Fade"
                                            AllowsTransparency="True">
                            <wpf:Card Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                      Foreground="{DynamicResource MDBody}"
                                      FontSize="15"
                                      FontWeight="Regular"
                                      Padding="{TemplateBinding Padding}"
                                      RenderOptions.ClearTypeHint="Enabled"                                      
                                      Margin="5">
                                <wpf:Card.Resources>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="VerticalContentAlignment" Value="Bottom" />
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                        <Setter Property="Padding" Value="16 0 16 16" />
                                        <Setter Property="Foreground" Value="{DynamicResource MDBody}" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Grid>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup Name="CommonStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                                                        <VisualTransition.GeneratedEasingFunction>
                                                                            <CircleEase EasingMode="EaseOut"/>
                                                                        </VisualTransition.GeneratedEasingFunction>
                                                                    </VisualTransition>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState Name="Normal"/>
                                                                <VisualState Name="MouseOver">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity"
                                                                                         To="0.1" Duration="0"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                                         To="0.48" Duration="0"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Border x:Name="MouseOverBorder"
                                                                Opacity="0"
                                                                Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"/>
                                                        <wpf:Ripple FeedBackBrush="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                                                    Focusable="False"
                                                                    MinHeight="48"
                                                                    Content="{TemplateBinding Content}"
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"                                                                
                                                                    Padding="{TemplateBinding Padding}"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </wpf:Card.Resources>
                            </wpf:Card>
                        </wpf:PopupEx>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <wpf:PackIcon x:Shared="False" x:Key="MDMultiFloatingActionPopupBoxIcon"
                  Kind="Plus" Width="24" Height="24" Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=Foreground}" />
    
    <Style TargetType="{x:Type wpf:PopupBox}" x:Key="MDMultiFloatingActionPopupBox">
        <Setter Property="Background" Value="{DynamicResource Purple500Brush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Purple500Brush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Purple500Foreground}"/>
        <Setter Property="wpf:RippleEditor.FeedBackBrush" Value="White" />
        <Setter Property="PlacementMode" Value="TopAndAlignCentres" />
        <Setter Property="PopupMode" Value="MouseOverEager" />
        <Setter Property="ToolTipService.Placement" Value="Left" />
        <Setter Property="ToolTipService.IsEnabled" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="wpf:ShadowEditor.shadowdepth" Value="Depth2" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MDToolTip}">
                            <Style.Setters>
                                <Setter Property="Margin" Value="8 10 8 10" />
                            </Style.Setters>
                        </Style>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid x:Name="RootGrid" Background="{x:Null}">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CheckedStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition From="*" To="Checked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="45"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                        <VisualTransition From="Checked" To="Unchecked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Checked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="45"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Unchecked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <AdornerDecorator>
                                                <AdornerDecorator.CacheMode>
                                                    <BitmapCache EnableClearType="True" SnapsToDevicePixels="True"/>
                                                </AdornerDecorator.CacheMode>
                                                <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                                         Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(wpf:ShadowEditor.shadowdepth), Converter={x:Static converters:ShadowConverter.instance}}"
                                                         x:Name="border">
                                                </Ellipse>
                                            </AdornerDecorator>
                                            <wpf:Ripple Focusable="False"  
                                                        Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                                        wpf:RippleEditor.OnCenter="True"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Padding="{TemplateBinding Padding}" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                <!-- additional layer so we don't rotate the ripple directly which can cause jumpyness under certain layouts -->
                                                <ContentControl Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                RenderTransformOrigin=".5,.5">
                                                    <ContentControl.RenderTransform>
                                                        <RotateTransform x:Name="ContentRotateTransform" Angle="0" />
                                                    </ContentControl.RenderTransform>
                                                </ContentControl>
                                            </wpf:Ripple>
                                            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Opacity" Value="0.23"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="border" Property="wpf:ShadowEditor.Darken" Value="True" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static wpf:PopupBoxPopupMode.MouseOver}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static wpf:PopupBoxPopupMode.MouseOverEager}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Storyboard x:Key="Open">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="Close">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.8">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"                                      
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"                                      
                                      ToolTip="{TemplateBinding ToolTip}"
                                      ToolTipService.Placement="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(ToolTipService.Placement)}">
                            <Grid>
                                <ContentControl x:Name="StandardToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource InvertedNullVisibilityConverter}}"/>
                                <ContentControl x:Name="ExplicitToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}"/>
                                <ContentControl x:Name="ExplicitToggleCheckedContent" Content="{TemplateBinding ToggleCheckedContent}" ContentTemplate="{TemplateBinding ToggleCheckedContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}"
                                                Opacity="0"
                                                RenderTransformOrigin=".5,.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="-45" />
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>
                        </ToggleButton>
                        <wpf:PopupEx x:Name="PART_Popup" 
                                          IsOpen="False"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"                                                                                    
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="None"                                          
                                          AllowsTransparency="True">
                            <Grid>
                                <Border Background="White" Opacity="0.002" />
                                <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                Margin="5" Padding="8"
                                                Opacity="0" x:Name="PART_PopupContentControl">
                                    <ContentControl.Resources>
                                        <ResourceDictionary>
                                            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MDToolTip}">
                                                <Style.Setters>
                                                    <Setter Property="Margin" Value="16 4 16 4" />
                                                </Style.Setters>
                                            </Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MDRoundBoutton}">
                                                <Style.Setters>
                                                    <Setter Property="ToolTipService.Placement" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(ToolTipService.Placement)}"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                                    <Setter Property="Margin" Value="4" />
                                                </Style.Setters>
                                            </Style>
                                        </ResourceDictionary>
                                    </ContentControl.Resources>
                                </ContentControl>
                            </Grid>
                        </wpf:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Open}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Close}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="PopupMode" Value="MouseOverEager">
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleContent" Value="{StaticResource MDMultiFloatingActionPopupBoxIcon}" />
        <Style.Triggers>
            <Trigger Property="UnfurlOrientation" Value="Horizontal">
                <Setter Property="ToolTipService.Placement" Value="Custom" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>